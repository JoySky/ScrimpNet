<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <appSettings>
   
    <!-- 
    Application.Key (required)
    Unique identifier of this application.  Used in consolidated logging to differentiate
    between log messages originating from two applications yet calling same framework methods

    Suggested location: local config with root config set to 'MissingAppKey'
    -->
    <add key="Application.Key" value="[define a key]"/>

    <!--
        Environment (required)
          Determines which environment this application is running in.  
          May be any value but should be one of a limited set
          
        Suggested location: root config
      -->
   
    
    <!-- 
        Logging.IsLastChanceLogEnabled (optional. Default: false)
        
          Determines if internal error and other information warnings are displayed.  Last chance
          logs are normally written by framework components when it is uncertain if messages
          can be sent through normal logging pipeline.  
          
          If an exception occurs in logging framework the exception will be sent to the LastChanceLog
          so applications might want to enable this flag especially for development and initial deployment.
          
          Values: One of 'yes', 'no', '1', '0', 'on', 'off', 'true', 'false'
          
        Suggested location: root config
      -->
    <add key="Logging.IsLastChanceLogEnabled" value="yes"/>

    <!--
        Logging.LastChanceLogFolder (optional. defaults to LastChanceLog in application's bin folder)
           Path where last chance log file will be written to.  Value=any valid folder 
           with optional fully qualified path
           
        Suggested location: root config
      -->
    <add key="Logging.LastChanceLogFolder" value="d:\logs\"/>

    <!--
      Logging.LogLevels (optional. Default:Vital)
        Comma separated list of log levels the logging subsystem will respond to.  
        This is the first level of filtering of log messages
        
        Values:  Debug, Trace, Information, Warning, Error, Critical, Verbose 
        (Information, Warning, Error, Critial), Vital (Warning, Error, Critical), All
        
        Suggested location:  local config with root config set to Vital
      -->
    <add key="Logging.LogLevels" value="All"/>

    <!--
      Logging.LogProvider (Required)
        Name of class,assembly that implements the ILogPersister interface.  All logging will
        be sent to this log persister.
      
      Suggested location: root config
    -->
    <add key="Logging.LogProvider" value="ScrimpNet.Core.Diagnostics.Logging.log4Net.Log4NetPersister,ScrimpNet.Core.Diagnostics.Logging.log4Net"/>
    
  </appSettings>
  <!--
  ===================================================================
    log4Net configuration
  ===================================================================
  -->
  <log4net debug="false">

    <renderer renderingClass="ScrimpNet.Core.Diagnostics.Logging.log4Net.ApplicationLogRenderer,ScrimpNet.Core.Diagnostics.Logging.log4Net" renderedClass="ScrimpNet.Core.Diagnostics.ApplicationLogMessage" />

    <!--
    ConsoleAppender
    
    Log messages directly to screen.  Messages are generally the .Net object.ToString() plus
    any prefix parameters defined in <conversionPattern> tag
  -->
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender, SamePage.OpenSource" >
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%ndc] - %message%newline" />
      </layout>
    </appender>

    <!--
  RollingLogFileAppender
    Standard log4Net text file appender.  Use for development and emergency debugging.
    
    Used for development and emergency debugging.  Objects written will file will be called by object.ToString()
    
    Standard log4Net filters can be used
    
    NOTE:  Be sure to provide full path and prefix of filename for log file.  log4Net will
            add a datetime suffix
  -->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender, log4Net">
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <staticLogFileName value="false" />
      <file value="c:\logfiles\RollLog" />
      <appendToFile value="true" />
      <maxSizeRollBackups value="-1" />
      <rollingStyle value="Composite" />
      <datePattern value=".yyyyMMddHH\.\l\o\g"/>
      <maximumFileSize value="5MB" />
      <layout type="log4net.Layout.PatternLayout,log4Net">
        <conversionPattern value="%message%newline" />      
      </layout>
    </appender>
    <appender name="RollingLogFile" type="ScrimpNet.Core.Diagnostics.Logging.log4Net.RollingLogAppender,ScrimpNet.Core.Diagnostics.Logging.log4Net">
      <folder value="c:\logs\" />
      <!--
      <filePrefix value="LogTests" />
      <timeStampFormat value="yyyy-MM-dd" />
      -->
    </appender>
    <root>
      <!-- lowest level of messages that will be sent to the appenders. DEBUG, INFO, WARN, ERROR, FATAL,OFF  -->
      <level value="DEBUG" />
      <!-- as a pattern, leave this vaule to DEBUG and use Logging.LogLevels for controlling logging -->
       <appender-ref ref="RollingLogFile" />
    </root>

  </log4net>
</configuration>