<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!--
    =================================================================
    ScrimpNet.Core Logging Settings
    
    * * * OPTIONAL * * *
    NOTE:  None of these settings are required.  They are all optional
    and you may use any of them or none of them.
    
    By default, you may not need to use any configuration settings but
    if you do, here they are.
    =================================================================
    -->
    <!--
    Application.Key (optional.  Strongly suggested)
    
    Default:  name of assembly starting the application
    
    Unique identifier of this application.  Used in consolidated logging to differentiate
    between log messages originating from two applications yet calling same framework methods
    -->
    <add key="Application.Key" value=""/>
    
    <!--
    Application.Environment (optional. Strongly suggested)
    
    Default:  machine name where this code is executing
    
    The area within the organization this code is running in (e.g. local, development, QA, staging, break-fix, etc)
      -->
    <add key="Application.Environment" value=""/>

    <!--
    Logging.Default.TimestampFormat (optional)
    
    Default: yyyyMMdd
             20091213
    
    Format to use when expanding {ts} token in file and folder names.
    
    NOTE:  Only one format can be configured for the system
    -->
    <add key="Logging.Default.TimestampFormat" value="yyyyMMdd"/>
    
    <!--
    Logging.LogLevels (optional)
    
    Default: Vital (Critical, Error, Warning)
    
    A comma delimited list of messages that the logging system will submit to persistent store.  Use
    this value to toggle the amount of logging the system will perform.
    
    One or more of the following:  Critical, Error, Warning, Information, Trace, Debug, Off
    
    Note:  If 'Off' is supplied, it will suspend all normal log output.  LastChance
           log will continue to operate
    -->
    <add key="Logging.LogLevels" value="Critical, Error, Warning"/>
    
    <!--
    Logging.IsLastChanceLogEnabled (optional)
    
    Default:  on
    
    Enabled output to the LastChanceLog.  For development and deployment this value
    might be 'On'.  After time, this value might be shifted to 'Off'
    
    One of the following values: On,True,Yes,1, Off, False, No, 0
    -->
    <add key="Logging.IsLastChanceLogEnabled" value="on"/>
    

    <!--
    =================================================================
    File and path name expansion tokens
    
    You can use these tokens to create semi-dynamic file and folder
    names.
    
    {env}     -   value of the Application.Environment key
    {app}     -   value of the Application.Key config value
    {machine} -   name of physical machine this program is running on
    {ts}      -   DateTime.Now time stamp using the Logging.TimestampFormat value
    {user}    -   Authenticated user executing this assembly
    =================================================================
    -->
    <!--
    Logging.LastChanceLogFile (optional)
    
    Default:  {app}.LastChance.{ts}.log
    
    Name of file where last change logging messages will be written to.  Includes
    both file name and extension.  May use any one of the standard file name
    expansion tokens.
    -->
    <add key="Logging.LastChanceLogFile" value="{app}.LastChance.{ts}.log"/>
    
    <!--
    Logging.LastChanceLogFolder (optional)
    
    Default:  '' (current working folder)
    
    Physical name of folder (without trialing '/')that will contain the last chance file(s). May
    use any one of the standard file name expansion tokens.
    
    NOTE:  The folder name is assumed to exist.  Be especially careful using the 
          {ts} path token as part of the folder name as we haven't used {ts} in
          production environments yet.
    -->
    <add key="Logging.LastChanceLogFolder" value=""/>
    
    <!--
    Logging.Default.LogFolder (optional)
    
    Default:  '' (current working folder of the application
    
    Physical name of folder (without trailing '/') that will contain the log file(s).  May
    use any one of the standard file name expansion tokens.
    
   NOTE:  The folder name is assumed to exist.  Be especially careful using the 
          {ts} path token as part of the folder name as we haven't used {ts} in
          production environments yet.
    -->
    <add key="Logging.Default.LogFolder" value=""/>
    
    <!--
    Logging.Default.FilePrefix (optional)
    
    Default:  {app}.{ts}
              MyApp.20100222
    
    Physical name of file (without trailing '.') containing log messages.  May use any
    one of the standard file name expansion tokens
    
    -->
    <add key="Logging.Default.FilePrefix" value="{app}.{ts}"/>
    
    <!--
    Logging.Default.FileExtension (optional)
    
    Default:  log
    
    Physical name of the extension (without leading '.') to place after the file name. May use
    any one of the standard file name expansion tokens
    -->
    <add key="Logging.Default.FileExtension" value="log"/>
    
    <!--
    =================================================================
    InternalLogFilePersister
    
    These values are used to tweak the asynchronous operation of
    the embedded log file persister.  This is the persister that is
    used if a custom log file persister is not configured.
    
    NOTE:  The default values are sufficient in most cases.  Be
    very careful when tweaking them.
    =================================================================
    -->
    
    <!--
    Logging.Default.BufferSweepMs (optional)
    
    Default:
    
    The number of milliseconds the log persister will accumulate records before
    waking up and writing all pending records to persistent store
    -->
    <add key="Logging.Default.BufferSweepMs" value="1000"/>
    
    <!--
    Logging.Default.MaxPageSize
    
    Default:
    
    Internal logger collects groups of records into 'pages' that are
    then enqueued for persisting.  Depending on threading
    algorithms, a thread might be responsible for persisting
    a page at a time.
    -->
    <add key="Logging.Default.MaxPageSize" value="300"/>
    
    <!--
    Logging.Default.CacheTimeOutMs
    
    Default:  1000
    
    Number of milliseconds a partial page can remain in memory before
    being submitted to internal persistance queue.
    -->
    <add key="Logging.Default.CacheTimeOutMs" value="1000"/>
   
    <!--
    Logging.Default.MaxFileSizeMb
    
    Default:  5
    
    Approximate file size of a log file before a new file
    is created
    -->
    <add key="Logging.Default.MaxFileSizeMb" value="5"/>
    
    <!--
    Logging.Persister (optional)
    
    Default:  internal asynchronous rolling file provider
              ScrimpNet.Core.Diagnostics.InternalLogFilePersister,ScrimpNet.Core
    
    Fully qualified class,assembly name of class that implements ILogPersister interface that will 
    be used to write log messages to permanent storage.
    
    This is where EntLib or log4Net providers can plug into the logging facade
    -->
    <add key="Logging.Persister" value="ScrimpNet.Core.Diagnostics.InternalLogFilePersister,ScrimpNet.Core"/>
  </appSettings>
</configuration>